<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - generator</title>
    <link href="https://alexnav73.github.io/tags/generator/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://alexnav73.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-03-16T00:00:00+00:00</updated>
    <id>https://alexnav73.github.io/tags/generator/atom.xml</id>
    <entry xml:lang="en">
        <title>Release of Navitski.Crystalized.Model</title>
        <published>2023-03-16T00:00:00+00:00</published>
        <updated>2023-03-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://alexnav73.github.io/post-2023-03-16/" type="text/html"/>
        <id>https://alexnav73.github.io/post-2023-03-16/</id>
        <content type="html">&lt;p&gt;Welcome to the series of posts, describing the library, I&#x27;ve been working on for a couple of years. It&#x27;s name is &lt;code&gt;Navitski.Crystalized.Model&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;&#x2F;h2&gt;
&lt;p&gt;A couple of years ago, I started to work on the budget management application. It was a toy project which supposed to help me to practice skills in developing software architecture and give me an opportunity to learn, how to develop applications from the scratch. So, I decided to use Hexagonal architecture. According to the Wikipedia:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The hexagonal architecture, or ports and adapters architecture, is an architectural pattern used in software design. It aims at creating loosely coupled application components that can be easily connected to their software environment by means of ports and adapters. This makes components exchangeable at any level and facilitates test automation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;img class=&quot;center&quot; src=&quot;&amp;#x2F;Hexagonal_Architecture.svg&quot;  width=&quot;400&quot; &#x2F;&gt;
&lt;p&gt;In this architecture, Domain model is a core of application which contains all business logic inside and has no external dependencies. The only things available outside are &amp;quot;ports&amp;quot;. Ports are most often understood as services which can be used to query and modify the domain model.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    subgraph Application
        domainModel[Domain Model] --&amp;gt; shard[Model Shard 1]
        domainModel --&amp;gt; etc[...]
        shard --&amp;gt; col[Collections]
        shard --&amp;gt; rel[Relations]
    end
    subgraph Plug-in
        domainModel --&amp;gt; shard2[Model Shard 2]
    end
&lt;&#x2F;div&gt;
</content>
    </entry>
</feed>
